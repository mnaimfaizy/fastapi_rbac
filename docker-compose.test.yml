# Docker Compose for Testing Environment
# This compose file sets up a testing environment with proper test configuration

services:
  # PostgreSQL Database for testing
  fastapi_rbac_db_test:
    image: bitnami/postgresql:15
    restart: always
    container_name: fastapi_rbac_db_test
    ports:
      - "5435:5432" # Different port for test environment
    env_file:
      - ./backend/.env.test
    environment:
      - POSTGRESQL_USERNAME=${DATABASE_USER:-postgres}
      - POSTGRESQL_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRESQL_DATABASE=${DATABASE_NAME:-fastapi_rbac_test}
    volumes:
      - fastapi_rbac_db_test_data:/bitnami/postgresql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-fastapi_rbac_test}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fastapi_rbac_test_network

  # Redis Cache for testing
  fastapi_rbac_redis_test:
    image: redis:7.2-alpine
    restart: always
    container_name: fastapi_rbac_redis_test
    ports:
      - "6381:6379" # Different port for test environment
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - fastapi_rbac_test_network

  # FastAPI Backend Application for testing
  fastapi_rbac_test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    container_name: fastapi_rbac_test
    ports:
      - "8002:8000" # Different port for test environment
    env_file:
      - ./backend/.env.test
    environment:
      - MODE=testing
      - DATABASE_HOST=fastapi_rbac_db_test
      - DATABASE_PORT=5432
      - REDIS_HOST=fastapi_rbac_redis_test
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://fastapi_rbac_redis_test:6379/0
      - CELERY_RESULT_BACKEND=redis://fastapi_rbac_redis_test:6379/0
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      fastapi_rbac_db_test:
        condition: service_healthy
      fastapi_rbac_redis_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network # React Frontend Application for testing
  react_frontend_test:
    build:
      context: ./react-frontend
      dockerfile: Dockerfile
    restart: always
    container_name: react_frontend_test
    ports:
      - "3001:5173" # Different port for test environment, React dev server runs on 5173
    env_file:
      - ./react-frontend/.env.test
    environment:
      - NODE_ENV=test
      - VITE_API_BASE_URL=http://localhost:8002
      - VITE_MODE=testing
    volumes:
      - ./react-frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      - fastapi_rbac_test
    networks:
      - fastapi_rbac_test_network

  # Celery Worker for background tasks in test environment
  fastapi_rbac_worker_test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    container_name: fastapi_rbac_worker_test
    command: celery -A app.celery_app worker --loglevel=info
    env_file:
      - ./backend/.env.test
    environment:
      - MODE=testing
      - DATABASE_HOST=fastapi_rbac_db_test
      - DATABASE_PORT=5432
      - REDIS_HOST=fastapi_rbac_redis_test
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://fastapi_rbac_redis_test:6379/0
      - CELERY_RESULT_BACKEND=redis://fastapi_rbac_redis_test:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      fastapi_rbac_db_test:
        condition: service_healthy
      fastapi_rbac_redis_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network

  # Celery Beat Scheduler for periodic tasks in test environment
  fastapi_rbac_beat_test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    container_name: fastapi_rbac_beat_test
    command: celery -A app.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./backend/.env.test
    environment:
      - MODE=testing
      - DATABASE_HOST=fastapi_rbac_db_test
      - DATABASE_PORT=5432
      - REDIS_HOST=fastapi_rbac_redis_test
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://fastapi_rbac_redis_test:6379/0
      - CELERY_RESULT_BACKEND=redis://fastapi_rbac_redis_test:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      fastapi_rbac_db_test:
        condition: service_healthy
      fastapi_rbac_redis_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network

  # Mail testing service for test environment
  mailhog_test:
    image: mailhog/mailhog:latest
    container_name: fastapi_rbac_mailhog_test
    ports:
      - "1026:1025"
      - "8027:8025" # Web UI on different port
    restart: unless-stopped
    networks:
      - fastapi_rbac_test_network

  # PgAdmin for database management in test environment
  fastapi_rbac_pgadmin_test:
    image: dpage/pgadmin4:latest
    restart: always
    container_name: fastapi_rbac_pgadmin_test
    ports:
      - "8082:80" # Different port for test environment
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - fastapi_rbac_pgadmin_test_data:/var/lib/pgadmin
    depends_on:
      fastapi_rbac_db_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network

  # Flower for Celery monitoring in test environment
  fastapi_rbac_flower_test:
    image: mher/flower:2.0
    restart: always
    container_name: fastapi_rbac_flower_test
    ports:
      - "5556:5555" # Different port for test environment
    environment:
      - CELERY_BROKER_URL=redis://fastapi_rbac_redis_test:6379/0
      - FLOWER_PORT=5555
    depends_on:
      fastapi_rbac_redis_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network

# Volumes for persistent data in test environment
volumes:
  fastapi_rbac_db_test_data:
    driver: local
  fastapi_rbac_pgadmin_test_data:
    driver: local

# Network for test environment
networks:
  fastapi_rbac_test_network:
    driver: bridge
    name: fastapi_rbac_test_network
