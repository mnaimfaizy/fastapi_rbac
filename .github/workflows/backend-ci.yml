name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check formatting with Black
        run: |
          cd backend
          # Use black with config from pyproject.toml
          black --check --config pyproject.toml .

      - name: Check imports with isort
        run: |
          cd backend
          # Use isort with config from pyproject.toml
          isort --check-only --settings-path pyproject.toml .

      - name: Lint with flake8
        run: |
          cd backend
          # Create a temporary flake8 config file that extends pyproject.toml settings
          echo "[flake8]" > .flake8
          echo "max-line-length = 110" >> .flake8
          echo "extend-ignore = E203" >> .flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Run full flake8 with configuration
          flake8 . --count --exit-zero --statistics

      - name: Type check with mypy
        run: |
          cd backend
          # Use mypy with config from pyproject.toml
          mypy --config-file pyproject.toml app

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      DATABASE_NAME: test
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      SECRET_KEY: testing_secret_key
      BACKEND_CORS_ORIGINS: '["http://localhost:8000", "http://localhost:5173"]'
      PROJECT_NAME: "FastAPI RBAC Test"
      TOKEN_ISSUER: "test_issuer"
      TOKEN_AUDIENCE: "test_audience"
      FIRST_SUPERUSER_EMAIL: "admin@example.com"
      FIRST_SUPERUSER_PASSWORD: "testpassword"
      USER_CHANGED_PASSWORD_DATE: "2023-01-01T00:00:00" # Example date
      JWT_REFRESH_SECRET_KEY: "another_testing_secret_key"
      JWT_RESET_SECRET_KEY: "reset_testing_secret_key"
      ENCRYPT_KEY: "a_very_strong_encryption_key_32" # Must be 32 url-safe base64-encoded bytes

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run migrations
        run: |
          cd backend
          export PYTHONPATH=.
          alembic upgrade head

      - name: Test with pytest and coverage
        run: |
          cd backend
          pytest --cov=app --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/
          fail_ci_if_error: false
          verbose: true
