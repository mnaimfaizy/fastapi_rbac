# Backend Production Docker Compose
# Optimized for production deployment with security and performance settings

services:
  # Shared Infrastructure Services
  fastapi_rbac_db:
    image: postgres:15-alpine
    container_name: fastapi_rbac_db_prod
    restart: always
    environment:
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRES_DB=${DATABASE_NAME:-fastapi_db}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    env_file:
      - .env.production
    volumes:
      - fastapi_rbac_postgres_prod_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fastapi_rbac_network
    ports:
      - "5432:5432"

  fastapi_rbac_redis:
    image: redis:7-alpine
    container_name: fastapi_rbac_redis_prod
    restart: always
    command: >
      redis-server
      --tls-port 6379
      --port 0
      --tls-cert-file /certs/redis.crt
      --tls-key-file /certs/redis.key
      --tls-ca-cert-file /certs/ca.crt
      --tls-auth-clients optional
      --requirepass ${REDIS_PASSWORD:-redis}
      --appendonly yes
    ports:
      - "6379:6379"
    expose:
      - 6379
    volumes:
      - ./certs:/certs:ro
      - fastapi_rbac_redis_prod_data:/data
    healthcheck:
      test: [
          "CMD",
          "redis-cli",
          "-h",
          "fastapi_rbac_redis_prod",
          "--tls",
          "--cacert",
          "/certs/ca.crt",
          "--insecure",
          "-a",
          "${REDIS_PASSWORD:-redis}",
          "ping"
        ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - fastapi_rbac_network

  # FastAPI Backend Production Service
  fastapi_rbac:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
    image: fastapi_rbac:prod
    container_name: fastapi_rbac_prod
    environment:
      - MODE=production
      - ENVIRONMENT=production
      - FASTAPI_ENV=production
      - DATABASE_HOST=fastapi_rbac_db_prod
      - REDIS_HOST=fastapi_rbac_redis_prod
      - DATABASE_TYPE=postgresql
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_NAME=${DATABASE_NAME:-fastapi_db}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - REDIS_URL=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/0?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - CELERY_BROKER_URL=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/0?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - CELERY_RESULT_BACKEND=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/0?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    env_file:
      - .env.production
    volumes:
      - ./certs:/certs:ro
    ports:
      - "8000:8000"
    user: appuser
    depends_on:
      fastapi_rbac_db:
        condition: service_healthy
      fastapi_rbac_redis:
        condition: service_healthy
    restart: always
    networks:
      - fastapi_rbac_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker Production Service
  fastapi_rbac_worker:
    build:
      context: .
      dockerfile: queue.dockerfile.prod
      args:
        - NODE_ENV=production
    image: fastapi_rbac_worker:prod
    container_name: fastapi_rbac_worker_prod
    environment:
      - MODE=production
      - ENVIRONMENT=production
      - DATABASE_HOST=fastapi_rbac_db_prod
      - REDIS_HOST=fastapi_rbac_redis_prod
      - DATABASE_TYPE=postgresql
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_NAME=${DATABASE_NAME:-fastapi_db}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - REDIS_URL=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/0?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - CELERY_BROKER_URL=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/0?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - CELERY_RESULT_BACKEND=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/0?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - SQLALCHEMY_DATABASE_URI=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@fastapi_rbac_db_prod:${DATABASE_PORT:-5432}/${DATABASE_NAME:-fastapi_db}
    env_file:
      - .env.production
    volumes:
      - ./certs:/certs:ro
    command: ["/bin/bash", "/app/scripts/worker-start.sh"]
    user: appuser
    restart: always
    depends_on:
      fastapi_rbac_db:
        condition: service_healthy
      fastapi_rbac_redis:
        condition: service_healthy
    networks:
      - fastapi_rbac_network

  # Celery Beat Production Service
  fastapi_rbac_beat:
    build:
      context: .
      dockerfile: queue.dockerfile.prod
      args:
        - NODE_ENV=production
    image: fastapi_rbac_worker:prod
    container_name: fastapi_rbac_beat_prod
    environment:
      - MODE=production
      - ENVIRONMENT=production
      - DATABASE_HOST=fastapi_rbac_db_prod
      - REDIS_HOST=fastapi_rbac_redis_prod
      - DATABASE_TYPE=postgresql
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_NAME=${DATABASE_NAME:-fastapi_db}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
      - REDIS_URL=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/1?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - CELERY_BROKER_URL=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/1?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
      - CELERY_RESULT_BACKEND=rediss://default:${REDIS_PASSWORD:-redis}@fastapi_rbac_redis_prod:${REDIS_PORT:-6379}/1?ssl_cert_reqs=none&ssl_ca_certs=/certs/ca.crt
    env_file:
      - .env.production
    volumes:
      - ./certs:/certs:ro
      - fastapi_rbac_celery_beat_prod_data:/app/celerybeat-schedule
    command: ["/bin/bash", "/app/scripts/beat-start.sh"]
    user: appuser
    restart: always
    depends_on:
      fastapi_rbac_db:
        condition: service_healthy
      fastapi_rbac_redis:
        condition: service_healthy
      fastapi_rbac_worker:
        condition: service_started
    networks:
      - fastapi_rbac_network

  # PgAdmin Production Service
  fastapi_rbac_pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fastapi_rbac_pgadmin_prod
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=80
      - DATABASE_HOST=fastapi_rbac_db_prod
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_NAME=${DATABASE_NAME:-fastapi_db}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - fastapi_rbac_pgadmin_prod_data:/var/lib/pgadmin
      - ../pgadmin/servers.json:/pgadmin4/servers.json:ro
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "echo 'fastapi_rbac_db_prod:5432:*:${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    networks:
      - fastapi_rbac_network
    depends_on:
      fastapi_rbac_db:
        condition: service_healthy
    env_file:
      - .env.production

volumes:
  fastapi_rbac_postgres_prod_data:
    name: fastapi_rbac_postgres_prod_data
  fastapi_rbac_celery_beat_prod_data:
    name: fastapi_rbac_celery_beat_prod_data
  fastapi_rbac_redis_prod_data:
    name: fastapi_rbac_redis_prod_data
  fastapi_rbac_pgadmin_prod_data:
    name: fastapi_rbac_pgadmin_prod_data

networks:
  fastapi_rbac_network:
    name: fastapi_rbac_network
    driver: bridge
