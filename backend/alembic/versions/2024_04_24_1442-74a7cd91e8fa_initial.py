"""initial

Revision ID: 74a7cd91e8fa
Revises:
Create Date: 2024-04-24 14:42:53.682337

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects.postgresql import UUID as pg_UUID

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "74a7cd91e8fa"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Function to get appropriate UUID type based on dialect
def get_uuid_type():
    # For SQLite (used in development), we'll use String to store UUIDs
    return sa.String(36)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "PermissionGroup",
        sa.Column("inserted_by", sa.Integer(), nullable=True),
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("permission_group_id", get_uuid_type(), nullable=True),
        sa.ForeignKeyConstraint(
            ["permission_group_id"],
            ["PermissionGroup.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_PermissionGroup_id"), "PermissionGroup", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_PermissionGroup_name"), "PermissionGroup", ["name"], unique=False
    )
    op.create_table(
        "Role",
        sa.Column("inserted_by", sa.Integer(), nullable=True),
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_Role_description"), "Role", ["description"], unique=False)
    op.create_index(op.f("ix_Role_id"), "Role", ["id"], unique=False)
    op.create_index(op.f("ix_Role_name"), "Role", ["name"], unique=False)
    op.create_table(
        "RoleGroup",
        sa.Column("inserted_by", sa.Integer(), nullable=True),
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_RoleGroup_id"), "RoleGroup", ["id"], unique=False)
    op.create_index(op.f("ix_RoleGroup_name"), "RoleGroup", ["name"], unique=False)
    op.create_table(
        "User",
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("last_updated_by", sa.Integer(), nullable=True),
        sa.Column("needs_to_change_password", sa.Boolean(), nullable=False),
        sa.Column("expiry_date", sa.DateTime(), nullable=True),
        sa.Column("contact_phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("last_changed_password_date", sa.DateTime(), nullable=True),
        sa.Column("number_of_failed_attempts", sa.Integer(), nullable=True),
        sa.Column("verified", sa.Boolean(), nullable=False),
        sa.Column(
            "verification_code", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_User_email"), "User", ["email"], unique=True)
    op.create_index(op.f("ix_User_first_name"), "User", ["first_name"], unique=False)
    op.create_index(op.f("ix_User_id"), "User", ["id"], unique=False)
    op.create_index(op.f("ix_User_last_name"), "User", ["last_name"], unique=False)
    op.create_table(
        "Permission",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("group_id", get_uuid_type(), nullable=False),
        sa.Column("inserted_by", sa.Integer(), nullable=True),
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["PermissionGroup.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_Permission_description"), "Permission", ["description"], unique=False
    )
    op.create_index(op.f("ix_Permission_id"), "Permission", ["id"], unique=False)
    op.create_index(op.f("ix_Permission_name"), "Permission", ["name"], unique=False)
    op.create_table(
        "UserPasswordHistory",
        sa.Column("user_id", get_uuid_type(), nullable=True),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["User.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_UserPasswordHistory_id"), "UserPasswordHistory", ["id"], unique=False
    )
    op.create_table(
        "UserRole",
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", get_uuid_type(), nullable=False),
        sa.Column("role_id", get_uuid_type(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["Role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["User.id"],
        ),
        sa.PrimaryKeyConstraint("id", "user_id", "role_id"),
    )
    op.create_index(op.f("ix_UserRole_id"), "UserRole", ["id"], unique=False)
    op.create_index(op.f("ix_UserRole_role_id"), "UserRole", ["role_id"], unique=False)
    op.create_index(op.f("ix_UserRole_user_id"), "UserRole", ["user_id"], unique=False)
    op.create_table(
        "rolegroupmap",
        sa.Column("role_group_id", get_uuid_type(), nullable=False),
        sa.Column("role_id", get_uuid_type(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_group_id"],
            ["RoleGroup.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["Role.id"],
        ),
        sa.PrimaryKeyConstraint("role_group_id", "role_id"),
    )
    op.create_index(
        op.f("ix_rolegroupmap_role_group_id"),
        "rolegroupmap",
        ["role_group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_rolegroupmap_role_id"), "rolegroupmap", ["role_id"], unique=False
    )
    op.create_table(
        "RolePermission",
        sa.Column("id", get_uuid_type(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("role_id", get_uuid_type(), nullable=False),
        sa.Column("permission_id", get_uuid_type(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["Permission.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["Role.id"],
        ),
        sa.PrimaryKeyConstraint("id", "role_id", "permission_id"),
    )
    op.create_index(
        op.f("ix_RolePermission_id"), "RolePermission", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_RolePermission_permission_id"),
        "RolePermission",
        ["permission_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_RolePermission_role_id"), "RolePermission", ["role_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_RolePermission_role_id"), table_name="RolePermission")
    op.drop_index(op.f("ix_RolePermission_permission_id"), table_name="RolePermission")
    op.drop_index(op.f("ix_RolePermission_id"), table_name="RolePermission")
    op.drop_table("RolePermission")
    op.drop_index(op.f("ix_rolegroupmap_role_id"), table_name="rolegroupmap")
    op.drop_index(op.f("ix_rolegroupmap_role_group_id"), table_name="rolegroupmap")
    op.drop_table("rolegroupmap")
    op.drop_index(op.f("ix_UserRole_user_id"), table_name="UserRole")
    op.drop_index(op.f("ix_UserRole_role_id"), table_name="UserRole")
    op.drop_index(op.f("ix_UserRole_id"), table_name="UserRole")
    op.drop_table("UserRole")
    op.drop_index(op.f("ix_UserPasswordHistory_id"), table_name="UserPasswordHistory")
    op.drop_table("UserPasswordHistory")
    op.drop_index(op.f("ix_Permission_name"), table_name="Permission")
    op.drop_index(op.f("ix_Permission_id"), table_name="Permission")
    op.drop_index(op.f("ix_Permission_description"), table_name="Permission")
    op.drop_table("Permission")
    op.drop_index(op.f("ix_User_last_name"), table_name="User")
    op.drop_index(op.f("ix_User_id"), table_name="User")
    op.drop_index(op.f("ix_User_first_name"), table_name="User")
    op.drop_index(op.f("ix_User_email"), table_name="User")
    op.drop_table("User")
    op.drop_index(op.f("ix_RoleGroup_name"), table_name="RoleGroup")
    op.drop_index(op.f("ix_RoleGroup_id"), table_name="RoleGroup")
    op.drop_table("RoleGroup")
    op.drop_index(op.f("ix_Role_name"), table_name="Role")
    op.drop_index(op.f("ix_Role_id"), table_name="Role")
    op.drop_index(op.f("ix_Role_description"), table_name="Role")
    op.drop_table("Role")
    op.drop_index(op.f("ix_PermissionGroup_name"), table_name="PermissionGroup")
    op.drop_index(op.f("ix_PermissionGroup_id"), table_name="PermissionGroup")
    op.drop_table("PermissionGroup")
    # ### end Alembic commands ###
