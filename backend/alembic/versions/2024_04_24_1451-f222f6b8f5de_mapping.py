"""mapping

Revision ID: f222f6b8f5de
Revises: 74a7cd91e8fa
Create Date: 2024-04-24 14:51:27.331801

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.engine import reflection

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "f222f6b8f5de"
down_revision: Union[str, None] = "74a7cd91e8fa"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Function to get appropriate UUID type based on dialect
def get_uuid_type():
    # For SQLite (used in development), we'll use String to store UUIDs
    return sa.String(36)


def upgrade() -> None:
    # Check if the table already exists (case insensitive)
    conn = op.get_bind()
    inspector = reflection.Inspector.from_engine(conn)
    tables = [t.lower() for t in inspector.get_table_names()]

    # Skip table creation if it already exists (in any case form)
    if "rolegroupmap" not in tables:
        # ### commands auto generated by Alembic - please adjust! ###
        op.create_table(
            "RoleGroupMap",
            sa.Column("id", get_uuid_type(), nullable=False),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("role_group_id", get_uuid_type(), nullable=False),
            sa.Column("role_id", get_uuid_type(), nullable=False),
            sa.ForeignKeyConstraint(
                ["role_group_id"],
                ["RoleGroup.id"],
            ),
            sa.ForeignKeyConstraint(
                ["role_id"],
                ["Role.id"],
            ),
            sa.PrimaryKeyConstraint("id", "role_group_id", "role_id"),
        )
        op.create_index(
            op.f("ix_RoleGroupMap_id"), "RoleGroupMap", ["id"], unique=False
        )
        op.create_index(
            op.f("ix_RoleGroupMap_role_group_id"),
            "RoleGroupMap",
            ["role_group_id"],
            unique=False,
        )
        op.create_index(
            op.f("ix_RoleGroupMap_role_id"), "RoleGroupMap", ["role_id"], unique=False
        )

    # We'll skip these operations as they're no longer needed
    # They were trying to drop the lowercase table and replace with uppercase
    # op.drop_index("ix_rolegroupmap_role_group_id", table_name="rolegroupmap")
    # op.drop_index("ix_rolegroupmap_role_id", table_name="rolegroupmap")
    # op.drop_table("rolegroupmap")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Skip this part in downgrade as well
    # op.create_table(
    #     "rolegroupmap",
    #     sa.Column("role_group_id", sa.UUID(), autoincrement=False, nullable=False),
    #     sa.Column("role_id", sa.UUID(), autoincrement=False, nullable=False),
    #     sa.ForeignKeyConstraint(
    #         ["role_group_id"], ["RoleGroup.id"], name="rolegroupmap_role_group_id_fkey"
    #     ),
    #     sa.ForeignKeyConstraint(
    #         ["role_id"], ["Role.id"], name="rolegroupmap_role_id_fkey"
    #     ),
    #     sa.PrimaryKeyConstraint("role_group_id", "role_id", name="rolegroupmap_pkey"),
    # )
    # op.create_index(
    #     "ix_rolegroupmap_role_id", "rolegroupmap", ["role_id"], unique=False
    # )
    # op.create_index(
    #     "ix_rolegroupmap_role_group_id", "rolegroupmap", ["role_group_id"], unique=False
    # )

    # Using the existence check for downgrade as well
    conn = op.get_bind()
    inspector = reflection.Inspector.from_engine(conn)
    tables = [t.lower() for t in inspector.get_table_names()]

    # Only drop if it exists in the exact capitalization
    if "RoleGroupMap".lower() in tables:
        try:
            # Check the actual table name with proper capitalization
            actual_tables = inspector.get_table_names()
            if "RoleGroupMap" in actual_tables:
                op.drop_index(
                    op.f("ix_RoleGroupMap_role_id"), table_name="RoleGroupMap"
                )
                op.drop_index(
                    op.f("ix_RoleGroupMap_role_group_id"), table_name="RoleGroupMap"
                )
                op.drop_index(op.f("ix_RoleGroupMap_id"), table_name="RoleGroupMap")
                op.drop_table("RoleGroupMap")
        except Exception:
            # If it fails, the table might be named with different case
            pass
    # ### end Alembic commands ###
