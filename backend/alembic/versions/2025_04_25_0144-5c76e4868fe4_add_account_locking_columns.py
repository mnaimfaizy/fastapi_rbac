"""add_account_locking_columns

Revision ID: 5c76e4868fe4
Revises: 8c263ccc446a
Create Date: 2025-04-25 01:44:00.165605

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "5c76e4868fe4"
down_revision: Union[str, None] = "8c263ccc446a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Add is_locked as nullable first
    op.add_column("User", sa.Column("is_locked", sa.Boolean(), nullable=True))
    # Update existing rows
    op.execute('UPDATE "User" SET is_locked = false')
    # Now make it non-nullable
    op.alter_column("User", "is_locked", existing_type=sa.Boolean(), nullable=False)
    # Add the locked_until column
    op.add_column("User", sa.Column("locked_until", sa.DateTime(), nullable=True))
    # Make user_id non-nullable in UserPasswordHistory
    op.alter_column(
        "UserPasswordHistory", "user_id", existing_type=sa.UUID(), nullable=False
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "UserPasswordHistory", "user_id", existing_type=sa.UUID(), nullable=True
    )
    op.drop_column("User", "locked_until")
    op.drop_column("User", "is_locked")
    # ### end Alembic commands ###
