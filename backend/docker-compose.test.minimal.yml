# Minimal Backend Test Environment for Fast Integration Testing
# Only essential services are enabled. Optional services are commented out for speed.

services:
  # FastAPI Backend Application for testing
  fastapi_rbac_test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
      args:
        - NODE_ENV=testing
        - ENVIRONMENT=testing
    image: fastapi_rbac:test
    restart: always
    container_name: fastapi_rbac_test
    ports:
      - "8002:8000"
    env_file:
      - .env.test
    environment:
      - MODE=testing
      - DATABASE_HOST=fastapi_rbac_db_test
      - DATABASE_PORT=5432
      - REDIS_HOST=fastapi_rbac_redis_test
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://fastapi_rbac_redis_test:6379/0
      - CELERY_RESULT_BACKEND=redis://fastapi_rbac_redis_test:6379/0
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@fastapi_rbac_db_test:5432/fastapi_rbac_test
      - INIT_TEST_DATA=true
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      fastapi_rbac_db_test:
        condition: service_healthy
      fastapi_rbac_redis_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network

  # Test Runner for integration tests (runs pytest and exits)
  fastapi_rbac_test_runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
      args:
        - NODE_ENV=testing
        - ENVIRONMENT=testing
    image: fastapi_rbac:test
    container_name: fastapi_rbac_test_runner
    env_file:
      - .env.test
    environment:
      - MODE=testing
      - DATABASE_HOST=fastapi_rbac_db_test
      - DATABASE_PORT=5432
      - REDIS_HOST=fastapi_rbac_redis_test
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://fastapi_rbac_redis_test:6379/0
      - CELERY_RESULT_BACKEND=redis://fastapi_rbac_redis_test:6379/0
      - TEST_PATH=${TEST_PATH}
      - COVERAGE=${COVERAGE}
      - VERBOSE=${VERBOSE}
      - PARALLEL=${PARALLEL}
      - FAST=${FAST}
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@fastapi_rbac_db_test:5432/fastapi_rbac_test_runner
      - INIT_TEST_DATA=true
      - USE_HTTP_TEST_CLIENT=1
      - TEST_API_BASE_URL=http://fastapi_rbac_test:8000
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
    depends_on:
      fastapi_rbac_test:
        condition: service_healthy
      fastapi_rbac_db_test:
        condition: service_healthy
      fastapi_rbac_redis_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network
    entrypoint: ["/bin/bash", "/app/scripts/testing-entrypoint.sh"]

  # PostgreSQL Database for testing
  fastapi_rbac_db_test:
    image: postgres:15-alpine
    restart: always
    container_name: fastapi_rbac_db_test
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_rbac_test
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./init-scripts/01-init-user.sh:/docker-entrypoint-initdb.d/01-init-user.sh:ro
      - ./init-scripts/02-init-test-runner-db.sh:/docker-entrypoint-initdb.d/02-init-test-runner-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fastapi_rbac_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - fastapi_rbac_test_network

  # Redis Cache for testing
  fastapi_rbac_redis_test:
    image: redis:7-alpine
    restart: always
    container_name: fastapi_rbac_redis_test
    ports:
      - "6381:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - fastapi_rbac_test_network

  # MailHog for email testing in test environment (needed for /registration and /reset-password)
  fastapi_rbac_mailhog_test:
    image: mailhog/mailhog:latest
    restart: always
    container_name: fastapi_rbac_mailhog_test
    ports:
      - "1026:1025"
      - "8027:8025"
    networks:
      - fastapi_rbac_test_network

  # Optional/Non-essential services for most integration tests (commented out for speed)
  fastapi_rbac_worker_test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
      args:
        - NODE_ENV=testing
        - ENVIRONMENT=testing
    image: fastapi_rbac:test
    container_name: fastapi_rbac_worker_test
    env_file:
      - .env.test
    environment:
      - MODE=testing
      - DATABASE_HOST=fastapi_rbac_db_test
      - DATABASE_PORT=5432
      - REDIS_HOST=fastapi_rbac_redis_test
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://fastapi_rbac_redis_test:6379/0
      - CELERY_RESULT_BACKEND=redis://fastapi_rbac_redis_test:6379/0
    volumes:
      - .:/app
    depends_on:
      fastapi_rbac_db_test:
        condition: service_healthy
      fastapi_rbac_redis_test:
        condition: service_healthy
    networks:
      - fastapi_rbac_test_network
    entrypoint:
      ["celery", "-A", "app.celery_app:celery_app", "worker", "--loglevel=info"]

volumes:
  postgres_test_data:
    name: fastapi_rbac_postgres_test_data
  redis_test_data:
    name: fastapi_rbac_redis_test_data
  pgadmin_test_data:
    name: fastapi_rbac_pgadmin_test_data

networks:
  fastapi_rbac_test_network:
    name: fastapi_rbac_test_network
    driver: bridge
